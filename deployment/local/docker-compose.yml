services:
  postgres_db:
    image: postgres:11
    restart: always
    ports:
      - "6000:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data

  api:
    build:
      dockerfile: api/Dockerfile
      context: "./../"
    image: api:latest
    depends_on:
      - postgres_db
    ports:
      - "5000:5000"
    environment:
      DB_HOST: postgres_db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_SCHEMA: ${DB_SCHEMA}
      DB_PORT: ${DB_PORT}
      PORT: ${NODE_API_PORT}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      LOG_LEVEL: ${LOG_LEVEL}
  
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3000}
    container_name: app-frontend
    # depends_on:
    #   - backend
    env_file:
      - ./.env
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3000}
    ports:
      - "${FRONTEND_HTTP_PORT:-8080}:80"
    restart: unless-stopped
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: app-backend
    env_file:
      - ./.env
    environment:
      - PORT=8000
      - PYTHONPATH=/app
      - DATABASE_URL=${DATABASE_URL:-postgresql://fastapi_user:fastapi_password@postgres:5432/fastapi_db}
    ports:
      - "8300:8000"
    volumes:
      - .:/app
      - /app/__pycache__
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  postgres:
    image: postgres:15-alpine
    container_name: fastapi-postgres
    environment:
      POSTGRES_DB: fastapi_db
      POSTGRES_USER: fastapi_user
      POSTGRES_PASSWORD: fastapi_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "7432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fastapi_user -d fastapi_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  default:
    name: app-network

volumes: 
  pgdata: